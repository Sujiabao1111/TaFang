{"version":3,"sources":["assets\\Script\\server\\xmsdk_cocos\\Utils\\Storage.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["export type Dataobj = {\n    operateTime: any,\n    expires?: string | number,\n    data: any,\n    resetData?: any\n}\n\nexport module Storage {\n    /**\n     * 判断是否符合执行条件\n     * @param {*} key 缓存key\n     * @param {*} needKey 是否必须传key\n     */\n    export function isEnabled(key?: string, needKey?: boolean) {\n        if (typeof window === 'object' && localStorage && (!needKey || key && typeof key === 'string')) {\n            return true\n        }\n    }\n\n    /**\n     * 过期时间格式话\n     * @param {*} expires 过期时间 \"2019-1-14 21:38:00\"【具体时间】 || (1 | \"1\" | \"1d\")【天】 || \"1h\"【小时】 || \"1m\"【分钟】 || \"1s\"【秒】 || \"0n\"【自然日】\n     */\n    export function formatExpires(expires: string | number) {\n        let date = new Date(),\n            unit = 86400000; //天\n\n        if (typeof expires === 'string') {\n            const time = parseFloat(expires);\n            if (expires.includes('n') && time != null && time >= 0) {\n                //自然日\n                date.setTime(date.getTime() + unit * time);\n                date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59)\n                expires = date.getTime();\n            } else if (/^\\w+$/.test(expires) && time != null && time > 0) {\n                //天/时/分/秒\n                if (expires.includes('h')) {\n                    unit = 3600000; //时\n                } else if (expires.includes('m')) {\n                    unit = 60000; //分\n                } else if (expires.includes('s')) {\n                    unit = 1000; //秒\n                }\n                date.setTime(date.getTime() + unit * parseFloat(expires));\n                expires = date.getTime();\n            } else {\n                //时间格式字符串\n                let arr: any = expires.trim().split(/\\D+/g);\n                if (arr.length >= 3 && !isNaN(arr[0]) && !isNaN(arr[1]) && !isNaN(arr[2])) {\n                    date = new Date(parseInt(arr[0]), parseInt(arr[1]) - 1, parseInt(arr[2]), parseInt(arr[3]) || 23, parseInt(arr[4]) || 59, parseInt(arr[5]) || 59);\n                    expires = date.getTime()\n                } else {\n                    expires = 0\n                }\n            }\n        } else if (typeof expires === 'number' && expires > 0) {\n            expires = date.getTime() + expires;\n        } else {\n            expires = 0;\n        }\n\n        return expires;\n    }\n\n    /**\n     * 设置缓存，可设置过期时间\n     * @param {*} key 缓存key\n     * @param {*} data 缓存数据\n     * @param {expires, success, fail} extra\n     *  expires \"2019-1-14 21:38:00\"【具体时间】 || (1 | \"1\" | \"1d\")【天】 || \"1h\"【小时】 || \"1m\"【分钟】 || \"1s\"【秒】 || \"0n\"【自然日】\n     */\n    export function set(key: string, data: any, extra?: { expires?: number | string; resetData?: any; }) {\n        if (typeof extra !== 'object') {\n            extra = {}\n        }\n\n        let { expires, resetData } = extra;\n\n        if (!Storage.isEnabled(key, true) && data !== undefined) {\n            return false\n        }\n\n        if (expires) {\n            expires = Storage.formatExpires(expires);\n\n            if (expires) {\n                const dataobj: Dataobj = {\n                    operateTime: Date.now(),\n                    expires,\n                    data,\n                };\n\n                resetData && (dataobj.resetData = resetData);\n                localStorage.setItem(key, JSON.stringify(dataobj));\n                // Log.log('设置，过期时间:', new Date(expires));\n            } else {\n                return false\n            }\n        } else {\n            const dataobj: Dataobj = {\n                operateTime: Date.now(),\n                data\n            };\n\n            localStorage.setItem(key, JSON.stringify(dataobj));\n        }\n\n        return true;\n    }\n\n    /**\n     * 获取缓存\n     * @param {*} key 缓存key\n     */\n    export function get(key: string) {\n        if (!Storage.isEnabled(key, true)) {\n            return\n        }\n\n        let data: Dataobj, storageData = localStorage.getItem(key);\n\n        if (typeof storageData === 'string') {\n            try {\n                data = JSON.parse(storageData);\n            } catch (err) {\n\n            }\n        }\n\n        if (data && data.expires && Date.now() > data.expires) {\n            if (data.resetData) {\n                data = data.resetData;\n                Storage.set(key, data, {});\n                // Log.log('获取，已过期时间:', new Date(data.expires));\n            } else {\n                Storage.remove(key);\n                // Log.log('获取，已过期时间:', new Date(data.expires));\n                data = undefined;\n            }\n        } else if (data && data.operateTime) {\n            data = data.data;\n        } else {\n            data = typeof storageData === 'string' ? JSON.parse(storageData) : storageData; \n        }\n\n        return data;\n    }\n\n    /**\n     * 获取所有缓存\n     */\n    export function getAll() {\n        let results = [];\n        const keys = Storage.getkeys();\n        if(keys){\n            keys.forEach((key: any) => {\n                results.push({\n                    key,\n                    data: Storage.get(key)\n                })\n            });    \n        }\n        return results;\n    }\n\n    /**\n     * 获取所有缓存key\n     */\n    export function getkeys() {\n        let i = 0,\n            keys = [];\n\n        while (localStorage.key(i)) {\n            keys.push(localStorage.key(i));\n            i++;\n        }\n\n        return keys;\n    }\n\n    /**\n     * 移除缓存\n     * @param {*} key 缓存key\n     */\n    export function remove(key: any) {\n        if (!Storage.isEnabled(key, true)) {\n            return\n        }\n\n        const Key = localStorage.key;\n        localStorage.removeItem(key);\n        localStorage.key = Key;\n    }\n\n    /**\n     * 清除过期缓存\n     * @param {*} isExpires 执行清除过期缓存\n     */\n    export function clear(isExpires: any) {\n        if (!Storage.isEnabled()) {\n            return\n        }\n\n        if (isExpires) {\n            const keys = Storage.getkeys();\n            if(keys){\n                keys.forEach((key: any) => {\n                    Storage.get(key)\n                });\n            }\n        } else {\n            localStorage.clear();\n        }\n    }\n\n    // 获取缓存（适用用于记录当日次数的缓存）\n    export function getStorageTimes(keyName: string) {\n        // Storage.clear(true);\n        const times = Storage.get(keyName);\n        if (times === null || !times) {\n            return 0;\n        } else {\n            return times;\n        }\n    }\n\n    // 设置次数（适用用于记录当日次数的缓存）\n    export function setStorageTimes(keyName: string, value = 1, extra?) {\n        let times = +Storage.getStorageTimes(keyName) + value;\n        Storage.set(keyName, times, extra);\n    }\n}"]}