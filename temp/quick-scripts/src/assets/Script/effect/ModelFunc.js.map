{"version":3,"sources":["assets\\Script\\effect\\ModelFunc.ts"],"names":[],"mappings":";;;;;;AAAA;IAAA;IA0CA,CAAC;IAvCU,qBAAW,GAAlB,UAAmB,IAAI,EAAE,MAAM,EAAE,QAAQ;QACrC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAA;SAC3C;QAED,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;YACxB,IAAI,IAAI,GAAY,IAAI,CAAC;YACzB,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;gBACjC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAA;aACpC;iBAAM;gBACH,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAA;aAChD;YACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;YACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;YACpC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;SACrC;aAAM;YACH,IAAI,IAAI,GAAG,mBAAiB,IAAM,CAAC;YACnC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,EAAE,UAAU,GAAG,EAAE,MAAM;gBACpD,IAAI,GAAG,EAAE;oBACL,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,CAAC;oBAC7B,OAAO;iBACV;gBACD,IAAI,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAClC,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;gBACpC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;gBAClC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAA;YACnC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACjB;IACL,CAAC;IACM,qBAAW,GAAlB,UAAmB,IAAY,EAAE,IAAa;QAC1C,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAA;SAC3C;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IAClC,CAAC;IAvCM,qBAAW,GAA2B,IAAI,GAAG,EAAE,CAAA;IAC/C,mBAAS,GAA6B,IAAI,GAAG,EAAE,CAAA;IAwC1D,gBAAC;CA1CD,AA0CC,IAAA;kBA1CoB,SAAS","file":"","sourceRoot":"/","sourcesContent":["export default class ModelFunc {\n    static prefab_list: Map<string, cc.Prefab> = new Map()\n    static pool_list: Map<string, cc.NodePool> = new Map()\n    static createModel(name, parent, callback) {\n        if (!this.pool_list[name]) {\n            this.pool_list[name] = new cc.NodePool()\n        }\n\n        if (this.prefab_list[name]) {\n            var temp: cc.Node = null;\n            if (this.pool_list[name].size() > 0) {\n                temp = this.pool_list[name].get()\n            } else {\n                temp = cc.instantiate(this.prefab_list[name])\n            }\n            temp.parent = parent\n            temp.name = name;\n            var script = temp.getComponent(name)\n            callback && callback(temp, script)\n        } else {\n            let path = `prefab/effect/${name}`;\n            cc.loader.loadRes(path, cc.Prefab, function (err, prefab) {\n                if (err) {\n                    cc.error(err.message || err);\n                    return;\n                }\n                var temp = cc.instantiate(prefab);\n                var script = temp.getComponent(name)\n                temp.parent = parent;\n                temp.name = name;\n                callback && callback(temp, script)\n                this.prefab_list[name] = prefab\n            }.bind(this));\n        }\n    }\n    static removeModel(name: string, node: cc.Node) {\n        if (!this.pool_list[name]) {\n            this.pool_list[name] = new cc.NodePool()\n        }\n        this.pool_list[name].put(node)\n    }\n\n}\n"]}