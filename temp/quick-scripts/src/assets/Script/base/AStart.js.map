{"version":3,"sources":["assets\\Script\\base\\AStart.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import tool from \"../util/tool\";\n\nclass Point {\n    x=0;\n    y=0;\n    G=0;//G值 开始点 到当前点的移动量\n    H=0;//H值　当前点移动目的地的移动量估算值\n    father=null;\n    Console(){\n        console.log(\"x:\"+this.x+\" and y:\"+this.y);\n    }\n    Init(x,y,father){\n        this.x=x;\n        this.y=y;\n        this.father=father;\n    }\n}\n\n\n\nexport default class AStar{\n\n    /**地图存放二维数组*/\n    map:number[][]=[];\n    /**行数*/\n    rowCount:number=0;\n    /**列数*/\n    colCount:number=0;\n    /**出发点*/\n    startPoint:Point = new Point();\n    /**终点*/\n    endPoint:Point = new Point();\n    /**存放Opint类的open数组*/\n    openList:any=[];\n    /**存在Opint类的close数组*/\n    closeList:any=[];\n    /**最终行走路线 */\n\n\n    /**初始化 \n     * @param map 二维数组\n     * @param rowCount 行数\n     * @param colCount 列数\n    */\n    init(map:number[][],rowCount:number,colCount:number){\n       this.map = this.changeMap(map);\n       this.rowCount = rowCount;\n       this.colCount = colCount;\n    }\n\n    /**\n     * 转变成该寻路方法的地图二维数组 \n     * 以前 0 空 1炮塔位置 2开始点 3结束点 4 道路\n     * 现在0 空（道路）　1 开始点　2 结束点　3 障碍物\n     * @param map 二维数组\n     */\n    private changeMap(map:number[][]){\n\n        let newMap:number[][] = tool.deepClone(map);\n        \n        for(let i = 0;i<newMap.length;i++){\n            for(let j = 0;j<newMap[i].length;j++){\n                let item = newMap[i][j];\n                if(item==0||item==1){\n                    newMap[i][j]=3;\n                }else if(item==2){\n                    newMap[i][j]=1;\n                    this.startPoint.x = i;\n                    this.startPoint.y = j;\n                }else if(item==3){\n                    newMap[i][j]=2;\n                    this.endPoint.x = i;\n                    this.endPoint.y = j;\n                }else if(item==4){\n                    newMap[i][j]=0;\n                }\n            }\n        }\n        return newMap;\n    }\n\n    /**\n     * \n     * @param x \n     * @param y \n     */\n\n    private IsBar(x,y){\n        if(this.map[x][y]==3){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    /**当前坐标是否在OpenList*/\n    private IsInOpenList(x,y){\n            for(var i=0;i<this.openList.length;i++){\n                if(this.openList[i].x==x&&this.openList[i].y==y){\n                    return true;\n                }\n\n            }\n        return false;\n    }\n    /**当前坐标是否在CloseList*/\n    private IsInCloseList(x,y){\n        for(var i=0;i<this.closeList.length;i++){\n            if(this.closeList[i].x==x&&this.closeList[i].y==y){\n                return true;\n            }\n\n        }\n        return false;\n    }\n    /**计算G值;(p是Point类)*/\n    private GetG(p){\n        if(p.father==null){\n            return 0;\n        }\n        return p.father.G+1;\n    }\n    /**计算H值*/\n    private GetH(p,pb){\n        return Math.abs(p.x-pb.x)+Math.abs(p.y-pb.y);\n    }\n    /**添加当前点的上下左右相邻的方格到Open列表中*/\n    private AddNeiToOpenList(curPoint){\n        for(var x=curPoint.x-1;x<=curPoint.x+1;x++){\n                for(var y=curPoint.y-1;y<=curPoint.y+1;y++){\n                    //排除自身以及超出下标的点\n                    if((x>=0&&x<this.colCount&&y>=0&&y<this.rowCount)&&!(curPoint.x==x&&curPoint.y==y)){\n                        //排除斜对角\n                        if(Math.abs(x-curPoint.x)+Math.abs(y-curPoint.y)==1){\n                            //不是障碍物且不在关闭列表中\n                            if(this.IsBar(x,y)==false&&this.IsInCloseList(x,y)==false){\n                                //不存在Open列表\n                                if(this.IsInOpenList(x,y)==false){\n                                    var point=new Point();\n                                    point.x=x;\n                                    point.y=y;\n                                    point.father=curPoint;\n                                    point.G=this.GetG(point);\n                                    point.H=this.GetH(point,this.endPoint);\n                                    this.openList.push(point);\n                                }\n                            }\n                        }\n                    }\n                }\n        }\n    }\n    /**\n     * 在openlist集合中获取G+H为最小的Point点\n     */\n    private GetMinFFromOpenList(){\n        var minPoint=null;\n        var index=0;\n        for(var i=0;i<this.openList.length;i++){\n            if(minPoint==null||minPoint.G+minPoint.H>=this.openList[i].G+this.openList[i].H){\n                minPoint=this.openList[i];\n                index=i;\n            }\n        }\n        return{\n            minPoint:minPoint,\n            index:index\n        }\n    }\n    /**\n     * \n     * @param x \n     * @param y \n     */\n    private GetPointFromOpenList(x,y){\n        for(var i=0;i<this.openList.length;i++){\n            if(this.openList[i].x==x&&this.openList[i].y==y){\n                return this.openList[i];\n            }\n        }\n        return null;\n\n    }\n    /**\n     * 开始寻找节点并返寻走路线 如果有返回数组，没有就返回null\n     * @param call 回调\n     */\n    FindPoint(call:Function){\n        console.log(this);\n        this.openList.push(this.startPoint);\n        while(this.IsInOpenList(this.endPoint.x,this.endPoint.y)==false||this.openList.length==0){\n            let data = this.GetMinFFromOpenList();\n            var curPoint=data.minPoint;\n            var index=data.index;\n            if(curPoint==null){\n                call&&call(null);\n                return null;\n            }\n            this.openList.splice(index,1);\n            this.closeList.push(curPoint);\n            this.AddNeiToOpenList(curPoint);\n        }\n        var p=this.GetPointFromOpenList(this.endPoint.x,this.endPoint.y);\n        while(p.father!=null){\n            p= p.father;\n            this.map[p.x][p.y]=4;\n        }\n        //把终结点也设置成4\n        this.map[this.endPoint.x][this.endPoint.y]=4;\n\n        //添加结束点\n        this.closeList.push(this.endPoint);\n        call&&call(this.closeList);\n    }\n\n   \n};\n"]}